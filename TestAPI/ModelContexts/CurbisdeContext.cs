using System;
using System.Linq;
using System.Security.Cryptography;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Logging.Debug;
using TestAPI.Enums;
using TestAPI.Models;
using TestAPI.Models.Curbside;

namespace TestAPI.ModelContexts
{
    public class CurbsideContext : DbContext
    {
        #region Tables
        public DbSet<ImageUrl> ImageUrls { get; set; }
        public DbSet<Product> Products { get; set; }
        public DbSet<ProductImage> ProductImages { get; set; }
        public DbSet<ProductItemCategory> ProductItemCategories { get; set; }
        public DbSet<Profile> Profiles { get; set; }
        public DbSet<SocialMedia> SocialMedias { get; set; }
        #endregion

        public CurbsideContext(DbContextOptions<CurbsideContext> options) : base(options)
        {
            // dotnet ef migrations add AddProfileEmailRequired --context CurbsideContext --output-dir Migrations/CurbsideContextMigration
            // dotnet ef migrations add AddSeed --context CurbsideContext --output-dir Migrations/CurbsideContextMigration

            //NOTE: Update Databse or Migrate new Scheme when extending DbContext using Microsoft.EntityFrameworkCore;
            //Logger.Log($"MIGRATIONS_START APPLIED={Database.GetAppliedMigrations().Count()} | PENDING={Database.GetPendingMigrations().Count()}");
            if (Database.GetPendingMigrations() != null && Database.GetPendingMigrations().Any())
            {
                Database.Migrate();
                //Database.EnsureDeleted();
            }
            //Logger.Log($"MIGRATIONS_END APPLIED={Database.GetAppliedMigrations().Count()} | PENDING={Database.GetPendingMigrations().Count()}");

            Database.EnsureCreated();
        }
        public static readonly LoggerFactory DbCommandDebugLoggerFactory
          = new LoggerFactory(new[] {
              new DebugLoggerProvider()
          });

        //NOTE: when extending DbContext using Microsoft.EntityFrameworkCore;
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            //optionsBuilder.UseSqlite("Filename=./video_games.sqlite");
            //optionsBuilder.UseSqlServer(@"Server=.\localdb;Database=TestingDB;Trusted_Connection=True;MultipleActiveResultSets=true");
            optionsBuilder
                .UseLoggerFactory(DbCommandDebugLoggerFactory) // to set the logger for DB query
                .EnableSensitiveDataLogging(); // enable logging

        }
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Product>()
                .HasMany( p => p.Images) ;
            modelBuilder.Entity<Product>()
                .HasMany( p => p.Categories);
            modelBuilder.Entity<Profile>()
                .HasMany( pr => pr.SocialMedias);
            modelBuilder.Entity<Brand>()
                .HasMany( b => b.Products);

            modelBuilder.AddAutoGeneratedValues<ImageUrl>();
            modelBuilder.AddAutoGeneratedValues<Product>();
            modelBuilder.AddAutoGeneratedValues<ProductItemCategory>();
            modelBuilder.AddAutoGeneratedValues<Profile>();
            modelBuilder.AddAutoGeneratedValues<SocialMedia> ();
            //modelBuilder.Entity<Profile>().Property(p => p.UpdatedAt).ValueGeneratedOnUpdate();

            base.OnModelCreating(modelBuilder);

        }

        void Seed(ModelBuilder modelBuilder)
        {
        }
    }
}